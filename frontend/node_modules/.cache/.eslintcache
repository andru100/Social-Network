[{"/home/andru/Documents/work/Dating-react-frontend/my-app/src/index.js":"1","/home/andru/Documents/work/Dating-react-frontend/my-app/src/App.js":"2","/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/SignUp.jsx":"3","/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/ProfileSetup.jsx":"4","/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/SignIn.jsx":"5","/home/andru/Documents/work/Dating-react-frontend/my-app/src/chkAuth.jsx":"6","/home/andru/Documents/work/Dating-react-frontend/my-app/src/PublicRoutes.jsx":"7","/home/andru/Documents/work/Dating-react-frontend/my-app/src/PrivateRoutes.jsx":"8","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/index.js":"9","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/App.js":"10","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/PublicRoutes.jsx":"11","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/PrivateRoutes.jsx":"12","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/chkAuth.jsx":"13","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/SignUp.jsx":"14","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/SignIn.jsx":"15","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/Profile.jsx":"16","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/ProfileSetup.jsx":"17"},{"size":733,"mtime":1641765689159,"results":"18","hashOfConfig":"19"},{"size":1714,"mtime":1642795333368,"results":"20","hashOfConfig":"19"},{"size":2755,"mtime":1642714001492,"results":"21","hashOfConfig":"19"},{"size":11075,"mtime":1642798430771,"results":"22","hashOfConfig":"19"},{"size":3055,"mtime":1642715005446,"results":"23","hashOfConfig":"19"},{"size":1245,"mtime":1641750140837,"results":"24","hashOfConfig":"19"},{"size":386,"mtime":1641771172472,"results":"25","hashOfConfig":"19"},{"size":358,"mtime":1642710044555,"results":"26","hashOfConfig":"19"},{"size":733,"mtime":1643993527161,"results":"27","hashOfConfig":"28"},{"size":1793,"mtime":1648071038817,"results":"29","hashOfConfig":"28"},{"size":692,"mtime":1648071880665,"results":"30","hashOfConfig":"28"},{"size":524,"mtime":1648070366740,"results":"31","hashOfConfig":"28"},{"size":1168,"mtime":1648081597184,"results":"32","hashOfConfig":"28"},{"size":3358,"mtime":1648318710671,"results":"33","hashOfConfig":"28"},{"size":3213,"mtime":1648318724875,"results":"34","hashOfConfig":"28"},{"size":14583,"mtime":1648318860485,"results":"35","hashOfConfig":"28"},{"size":12260,"mtime":1648318672987,"results":"36","hashOfConfig":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"eulext",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"dtu4n4",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"/home/andru/Documents/work/Dating-react-frontend/my-app/src/index.js",["86"],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/App.js",["87","88"],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/SignUp.jsx",["89"],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/ProfileSetup.jsx",["90","91","92"],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/routes/SignIn.jsx",["93","94"],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/chkAuth.jsx",[],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/PublicRoutes.jsx",[],"/home/andru/Documents/work/Dating-react-frontend/my-app/src/PrivateRoutes.jsx",[],"/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/index.js",["95"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n//import SignUp from \"./routes/SignUp\";\n//import SignIn from \"./routes/SignIn\";\n//import ProfileSetup from \"./routes/ProfileSetup\";\n\n\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n   <BrowserRouter>\n    <Routes>\n      <Route path=\"*\" element={<App />}/>\n        {/* <Route path=\"SignUp\" element={<SignUp />} />\n        <Route path=\"SignIn\" element={<SignIn />} />\n        <Route path=\"ProfileSetup\" element={<ProfileSetup />} />\n      </Route> */}\n    </Routes>\n   </BrowserRouter>,\n   rootElement\n);\n\n","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/App.js",["96","97","98","99","100"],[],"import React from 'react';\nimport './css/main.css';\nimport './css/util.css';\nimport './css/homePage.css';\nimport { useState, useEffect } from 'react'\nimport { Outlet, Link, useNavigate } from \"react-router-dom\";\nimport ChkAuth from './chkAuth';\nimport PrivateRoutes from './PrivateRoutes';\nimport PublicRoutes from './PublicRoutes';\n\nconst AuthorizationContext  = React.createContext();\n\n//Checks if JWT stored in local storage is valid and shows private routes\n//If auth fails then user is shown sign in page\nfunction App() {\n  \n  const [sessionUser, setSessionUser] = useState (false)\n  // const [auth, setAuth] = useState (false);\n  // const Navigate = useNavigate();\n\n  // useEffect( () => {\n  //   alert(\"useeffect\")\n  //   ChkAuth().then(user => {\n  //     if (user) {\n  //     setAuth(true)\n  //     setSessionUser(user)\n  //     alert(\"user returned from chkauth\", user)\n  //     }\n  //   })\n  // },);\n\n  return (\n  <div>\n    <nav\n      style={{\n        borderBottom: \"solid 1px\",\n        paddingBottom: \"1rem\"\n      }}\n    >\n      <Link to=\"/signUp\">signUp</Link> |{\" \"}\n      <Link to=\"/signIn\">signIn</Link>\n      <Link to=\"/profileSetup\">profileSetup</Link>\n    </nav>\n    <div className=\"limiter\">\n      <div className=\"container-login100\" >\n        <div className=\"wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33\">\n          <form className=\"login100-form validate-form flex-sb flex-w\">\n            {/* <Outlet /> */}\n            <AuthorizationContext.Provider value={sessionUser}>\n                {/* {alert(\"sessionUser in routes is\" , sessionUser)}  */}\n                {sessionUser ? <PrivateRoutes user={sessionUser}/> : <PublicRoutes />}\n            </AuthorizationContext.Provider>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/PublicRoutes.jsx",[],[],"/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/PrivateRoutes.jsx",[],[],"/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/chkAuth.jsx",["101"],[],"import { useNavigate } from 'react-router-dom';\n\nexport default async function Chkauth (){//check if jwt is valid \n  //alert(\"chkauth running\")\n    let jwt = localStorage.getItem('jwt_token');\n    console.log(\"got from storage:\", jwt)\n    //const Navigate = useNavigate();\n\n    let jwtObject = {\n      Data1: jwt\n    }\n\n    let options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(jwtObject),\n      }\n      \n      let url = 'http://192.168.1.93:4001/chkauth'\n      let response = await fetch(url, options)// post jwt\n      let convert = await response.json ()\n      console.log(\"User password check complete:\")\n      console.log(response.status)\n\n    if ( response.status === 401 || response.status === 400){// handle not a match\n      //alert(\"you not authorized to view this page please sign in\")\n      //Navigate(\"/signIn\")\n      return false   \n     } else if ( response.status === 200){ // if password is a match return auth'd username\n      //alert(\"user found chkauth returning user\")\n      console.log(\"authorized by api\", convert.AuthdUser)\n      return convert.AuthdUser\n     }\n} ","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/SignUp.jsx",[],[],"/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/SignIn.jsx",["102","103"],[],"import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, Link } from 'react-router-dom';\nimport ChkAuth from '../chkAuth';\n\nexport default function RenderSignin () {\n\t//const [Render, SetRender] = useState (0);\n  \t//alert(Render)\n\tconst Navigate = useNavigate();\n\n\tuseEffect( () => {\n\t\t//check if signed in and go to profile page\n\t\tChkAuth().then(user => {\n\t\t  if (user) {\n\t\t  Navigate(/profile/+user)\n\t\t  //alert(\"user returnedddddd from chkauth\", user)\n\t\t  } \n\t\t})\n\t  },[]);\n\n\t\n\tasync function signin(){ // Sign in, check password, get token\n\t\t\n\t\tconst username = document.getElementById('username').value;// get username and password\n\t\tconst password = document.getElementById('pass').value;\n\t\t\t\n\t\tlet signindata = {\n\t\t\tUsername: username,\n\t\t\tPassword: password\n\t\t}\n\t\t\n\t\tlet options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(signindata),\n\t\t}\n\t\t\n\t\tlet signinurl = 'http://192.168.1.93:4001/signin/' + username\n\t\t\n\t\t// post request to check sign in details;\n\t\tlet response = await fetch(signinurl, options)// post signin details with id in url\n\t\tlet convert = await response.json ()\n\t\tconsole.log(\"User password check complete:\")\n\t\tconsole.log(response.status)\n\t\tif ( response.status === 200){ // if password is a match redirect to profile page\n\t\t\tconsole.log(\"pword correct stored in local\", \"authjwt=\"+convert.token)\n\t\t\t//document.cookie = \"authjwt=\"+convert.token; // store data in cookie\n\t\t\tlocalStorage.setItem('jwt_token', convert.token) // Store JWT in storage\n\t\t\tNavigate (\"/Profile/\"+username)\n\t\t} else if ( response.status === 401){// handle not a match\n\t\t\talert(\"userame or password was incorrect please try again\")\n\t\t}\n\t\t\n\t\t}\n\t\n  return (  \n    <>\n      <span className=\"login100-form-title p-b-53\">\n\t\t\t\t\t\tSign In With\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<a href=\"/#\" className=\"btn-face m-b-20\">\n\t\t\t\t\t\t<i className=\"fa fa-facebook-official\"></i>\n\t\t\t\t\t\tFacebook\n\t\t\t\t\t</a>\n\n\t\t\t\t\t<a href=\"/#\" className=\"btn-google m-b-20\">\n\t\t\t\t\t\t<img src=\"icon-google.png\" alt=\"GOOGLE\" />\n\t\t\t\t\t\tGoogle\n\t\t\t\t\t</a>\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\tUsername\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Username is required\">\n\t\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"username\" id=\"username\"/>\n\t\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"p-t-13 p-b-9\">\n\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\tPassword\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<a href=\"/#\" className=\"txt2 bo1 m-l-5\">\n\t\t\t\t\t\t\tForgot?\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n\t\t\t\t\t\t<input className=\"input100\" type=\"password\" name=\"pass\" id=\"pass\" />\n\t\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t\t\t<button className=\"login100-form-btn\" type=\"button\" onClick={signin}>\n\t\t\t\t\t\t\tSign In\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"w-full text-center p-t-55\">\n\t\t\t\t\t\t<span className=\"txt2\">\n\t\t\t\t\t\t\tNot a member?\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<Link to=\"/signUp\">Sign up now</Link> \n\t\t\t\t\t\n\t\t\t\t\t</div>\n    </>\n  )\n};","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/Profile.jsx",["104","105","106","107","108","109","110","111","112","113"],[],"import React from 'react';\nimport { useState, useEffect } from \"react\"\nimport { useNavigate, useParams } from \"react-router\";\nimport ChkAuth from '../chkAuth';\n\nexport default function Home (props) {\n   const [sessionUser, setSessionUser] = useState (\"nonw\")\n   const [auth, setAuth] = useState (false);\n   const Navigate = useNavigate();\n\n   let params = useParams()\n   let userName = params.id \n   let flexUser\n   if (userName === \"all\"){\n     flexUser = \"Home Feed\"\n   } else { \n      flexUser = params.id \n   }\n   let Today = new Date().toLocaleDateString()\n\n  useEffect( () => {\n    //alert(\"useeffect\")\n    ChkAuth().then(user => {\n      if (user) {\n      setAuth(true)\n      setSessionUser(user)\n      //alert(\"user returnedddddd from chkauth\", user)\n      } else {\n         setAuth(false)\n         setSessionUser(false)\n      }\n    })\n  },[]);\n\n\n   const[cmt, setcmt] = useState([\"hi\", \"hi\"])\n   useEffect( () => {\n      //alert(\"useeffect\")\n      getCmt().then(cmtz => {\n        if (cmtz) {\n        setcmt(cmtz)\n        console.log(\"returned from chkauth added to statw\", cmtz)\n        }\n      })\n    },[]);\n\n    function goToProfile (){\n      Navigate (\"/profile/\"+sessionUser)\n    }\n\n    function goToAllPosts (){\n      Navigate (\"/profile/all\")\n    }\n\n    function Logout (){\n      localStorage.removeItem('jwt_token')\n      //alert(\"deleted jwt\")\n      Navigate (\"/\")\n    }\n\n   async function getCmt () { // sends username, password from input server then creates s3 bucket in username and stores details on mongo\n  \n        \n        // data to be sent in request to api includinb id of mongodb document\n      let data = {Username: userName}\n  \n      // object containing fetch options for the put request\n      let options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n      }\n  \n      let Url = 'http://192.168.1.93:4001/getCmt'\n      // post request using options object\n      console.time(\"put response took\");\n      let response = await fetch(Url, options)\n      let convert = await response.json ()\n      console.timeEnd(\"put response took\");\n      console.log(\"got comment is:\")\n      console.log(convert)\n  \n      if ( response.status === 401 || response.status === 400){// handle not a match\n        //alert(\"couldnt find comments try again\")\n        // Navigate(\"/signIn\")\n        //return false   \n       } else if ( response.status === 200){ // if password is a match return auth'd username\n        console.log(\"found post data\")\n        console.log(convert.Posts)\n        //setcmt(convert.Posts)\n           //document.cookie = \"authjwt=\"+convert.token; // store data in cookie\n           //localStorage.setItem('jwt_token', convert.token) // Store JWT in storage\n        ////alert(\"Welcome to the club! Please setup your profile\")\n           //Navigate (\"/profileSetup\")\n           return convert.Posts\n       }\n       \n    }\n\n\n   async function sendCmt (msgType, cmtAuthr, iD) { // sends username, password from input server then creates s3 bucket in username and stores details on mongo\n      //alert(\"date is\", Date.now)\n      let cmt = \"no need for comment\"// in case is reply and comment box not shown so cause null error\n      if (msgType === \"isCmt\") {\n         cmt = document.getElementById(\"cmt\").value // get reply to cmt if there\n      }\n\n      const Post = { // send starter post\n         Username : cmtAuthr,\n         MainCmt : cmt ,// get username password and email\n         Time : new Date().toLocaleTimeString('en-GB', { hour: \"numeric\", minute: \"numeric\"}),\n         Date : Today,\n         TimeStamp : Date.now(),\n         Comments : [] ,// begin sub comments \n         Likes : [] // begin like\n      }\n\n      let reply ={Username : \"dud\",\n                  Comment : \"dud\"\n      }\n\n      //let reply = \"hi\"\n      if (msgType === \"isResponse\") {\n         reply.Username = sessionUser\n         reply.Comment = document.getElementById(iD).value // get reply to cmt if there\n      }\n\n      let Liker = {Username : \"dud\"}\n      if (msgType === \"cmtLiked\") {\n         //alert(\"likesender is\", sessionUser)\n         Liker.Username = sessionUser\n      }\n\n        \n        // dsend start comment or reply to comment depending on is replychk false/true\n      let data = {Username: userName, Updatetype: '$set',\n                  Key2updt: 'Posts', isReply: msgType, replyCmt: reply, LikeSent: Liker, PostIndx: iD, Value2updt: Post\n      }\n  \n      // object containing fetch options for the put request\n      let options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n      }\n  \n      let postUrl = 'http://192.168.1.93:4001/postMsg'\n      // post request using options object\n      console.time(\"put response took\");\n      let response = await fetch(postUrl, options)\n      let convert = await response.json ()\n      console.timeEnd(\"put response took\");\n      console.log(\"added comment updated document is:\")\n      console.log(convert)\n  \n      if ( response.status === 401 || response.status === 400){// handle not a match\n        //alert(\"your comment wasnt added try again\")\n        // Navigate(\"/signIn\")\n        //return false   \n       } else if ( response.status === 200){ // if password is a match return auth'd username\n        console.log(\"pushed comment\")\n        console.log(convert.Posts)\n        setcmt(convert.Posts)\n        ////alert(\"pushed comment\")\n           //document.cookie = \"authjwt=\"+convert.token; // store data in cookie\n           //localStorage.setItem('jwt_token', convert.token) // Store JWT in storage\n        ////alert(\"Welcome to the club! Please setup your profile\")\n           //Navigate (\"/profileSetup\")\n       }\n    }\n\n   function redirecter () {\n      Navigate(\"/signIn\")\n   }\n\n   function EditProfile (){\n      Navigate (\"/editProfile\")\n    }\n\n\n\nreturn (\n       \n<div className=\"container\">\n   <div className=\"row\">\n      <div className=\"col-md-12\">\n         <div id=\"content\" className=\"content content-full-width\">\n            {/* begin profile */}\n            <div className=\"profile\">\n               <div className=\"profile-header\">\n                  {/* BEGIN profile-header-cover */}\n                  <div className=\"profile-header-cover\"></div>\n                  {/* END profile-header-cover */}\n                  {/* BEGIN profile-header-content */}\n                  <div className=\"profile-header-content\">\n                     {/* BEGIN profile-header-img */}\n                     <div className=\"profile-header-img\">\n                        <img src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic1.jpg\"} alt=\"\"/>\n                     </div>\n                     {/* END profile-header-img */}\n                     {/* BEGIN profile-header-info */}\n                     <div className=\"profile-header-info\">\n                        <h4 className=\"m-t-10 m-b-5\">{flexUser}</h4>\n                        <p className=\"m-b-10\">UXUI + Frontend Developer</p>\n                        <a href=\"#\" className=\"btn btn-sm btn-info mb-2\" onClick={() => {EditProfile()}}>Edit Profile</a>\n                        <a href=\"#\" className=\"btn btn-sm btn-info mb-2\" onClick={() => {Logout()}}>Log Out</a>\n                     </div>\n                     {/* END profile-header-info */}\n                  </div>\n                  {/* END profile-header-content */}\n                  {/* BEGIN profile-header-tab */}\n                  <ul className=\"profile-header-tab nav nav-tabs\">\n                     <li className=\"nav-item\"><a href=\"\" className=\"nav-link active show\" data-toggle=\"tab\" onClick={() => {goToProfile()}}>PROFILE</a></li>\n                     <li className=\"nav-item\"><a href=\"\" className=\"nav-link\" data-toggle=\"tab\" onClick={() => {goToAllPosts()}}>FEED</a></li>\n                     <li className=\"nav-item\"><a href=\"#profile-photos\" className=\"nav-link\" data-toggle=\"tab\">MEDIA</a></li>\n                     <li className=\"nav-item\"><a href=\"#profile-friends\" className=\"nav-link\" data-toggle=\"tab\">FRIENDS</a></li>\n                  </ul>\n                  {/* END profile-header-tab */}\n               </div>\n            </div>\n            {/* end profile */}\n            {/*write comment section*/}\n            {sessionUser === userName || (sessionUser && userName === \"all\") ? <div className=\"input\">\n                     <form action=\"\">\n                        <div className=\"input-group\">\n                           <input type=\"text\" className=\"form-control rounded-corner\" id=\"cmt\" placeholder=\"Write a comment...\"/>\n                           <span className=\"input-group-btn p-l-10\">\n                              <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\" onClick={() => sendCmt(\"isCmt\", sessionUser, 0)}>Comment</button>\n                           </span>\n                        </div>\n                  </form>\n              </div> : <div></div>}\n            {/*end comment sectiom*/}\n            {/* begin profile-content */}\n            <div className=\"profile-content\">\n               {/* begin tab-content */}\n               <div className=\"tab-content p-0\">\n                  {/* begin #profile-post tab */}\n                  <div className=\"tab-pane fade active show\" id=\"profile-post\">\n                     {/* begin timeline */}\n                     <ul className=\"timeline\">\n                     {\n                        cmt.map((postData)=> (\n                           <li>\n                           {/* begin timeline-time */}\n                           <div className=\"timeline-time\">\n                              <span className=\"date\">{postData.Date === Today ? \"Today\" : postData.Date}</span>\n                              <span className=\"time\">{postData.Time}</span>\n                           </div>\n                           {/* end timeline-time */}\n                           {/* begin timeline-icon */}\n                           <div className=\"timeline-icon\">\n                              <a href=\"javascript:;\">&nbsp;</a>\n                           </div>\n                              {/* end timeline-icon  */}\n                           {/* begin timeline-body */}\n                           <div className=\"timeline-body\">\n                              <div className=\"timeline-header\">\n                                 <span className=\"userimage\"><img src={\"https://\" + postData.Username + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic1.jpg\"} alt=\"\"/></span>\n                                 <span className=\"username\"><a href=\"javascript:;\">{postData.Username}</a> <small></small></span>\n                                 <span className=\"pull-right text-muted\">18 Views</span>\n                              </div>\n                              <div className=\"timeline-content\">\n                                 <p>\n                                    {postData.MainCmt}\n                                 </p>\n                              </div>\n                              <div className=\"timeline-likes\">\n                                 <div className=\"stats-right\">\n                                    <span className=\"stats-text\">{postData.Likes?.length} Likes</span>\n                                    <span className=\"stats-text\">{postData.Comments?.length} Comments</span>\n                                 </div>\n                                 <div className=\"stats\">\n                                    <span className=\"fa-stack fa-fw stats-icon\">\n                                    <i className=\"fa fa-circle fa-stack-2x text-danger\"></i>\n                                    <i className=\"fa fa-heart fa-stack-1x fa-inverse t-plus-1\" onClick={()=>sendCmt(\"cmtLiked\", postData.Username, postData.PostNum)}></i>\n                                    </span>\n                                    <span className=\"fa-stack fa-fw stats-icon\">\n                                    <i className=\"fa fa-circle fa-stack-2x text-primary\"></i>\n                                    <i className=\"fa fa-thumbs-up fa-stack-1x fa-inverse\"></i>\n                                    </span>\n                                    {/* <span className=\"stats-total\">4.3k</span> */}\n                                 </div>\n                              </div>\n                             \n                              <div className=\"timeline-comment-box\">\n                                 <div className=\"user\"><img src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic1.jpg\"}/></div>\n                                 <div className=\"input\">\n                                    <form action=\"\">\n                                       {auth ? \n                                          <div className=\"input-group\">\n                                          <input type=\"text\" className=\"form-control rounded-corner\" id={postData.PostNum} placeholder=\"Write a comment...\"/>\n                                          <span className=\"input-group-btn p-l-10\">\n                                             <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\"  onClick={()=>sendCmt(\"isResponse\", postData.Username, postData.PostNum)}>Comment</button>\n                                          </span>\n                                          </div>\n                                          :\n                                          <div className=\"input-group\">\n                                          <input type=\"text\" className=\"form-control rounded-corner\" id={postData.PostNum} placeholder=\"Write a comment...\"/>\n                                          <span className=\"input-group-btn p-l-10\">\n                                             <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\" onClick={()=>redirecter()} >Sign In to Commment</button>\n                                          </span>\n                                          </div>}\n                                    </form>\n                                 </div>\n                              </div>\n                           </div>\n                           {/* end timeline-body */}\n                        </li>\n                        ))\n                     }\n                     </ul>\n                     {/* end timeline */}\n                  </div>\n                  {/* end #profile-post tab */}\n               </div>\n               {/* end tab-content */}\n            </div>\n            {/* end profile-content */}\n         </div>\n      </div>\n   </div>\n</div>\n    )\n}","/home/andru/Documents/work/portfolio/social-network-frontend-portfolio/src/routes/ProfileSetup.jsx",["114","115","116","117"],[],"import React from 'react';\nimport { getMultipleAccounts } from '@project-serum/anchor/dist/cjs/utils/rpc';\nimport { useEffect, useState} from 'react'\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ChkAuth from '../chkAuth';\n \n\n\nexport default function RenderProfileSetup (props) { \n  //alert(\"called setup\")\n  //UseState to hold uploaded file for sending\n  const [sessionUser, setSessionUser] = useState (\"nonw\")\n  const [auth, setAuth] = useState (false);\n  const Navigate = useNavigate();\n  let userName = sessionUser\n\n\n\n  useEffect( () => {\n    //alert(\"useeffect\")\n    ChkAuth().then(user => {\n      if (user) {\n      setAuth(true)\n      setSessionUser(user)\n      //alert(\"user returnedddddd from chkauth\", user)\n      } else {\n         setAuth(false)\n         setSessionUser(false)\n         alert(\"You need to sign in to view this page\")\n         Navigate(\"/signIn\")\n      }\n    })\n  },[]);\n\n  function Logout (){\n    localStorage.removeItem('jwt_token')\n    //alert(\"deleted jwt\")\n    Navigate (\"/\")\n  }\n\n\n  async function updateBio () { // sends username, password from input server then creates s3 bucket in username and stores details on mongo\n    \n    const bio = document.getElementById('bioBox').value;// get username password and email\n      \n      // data to be sent in request to api includinb id of mongodb document\n    let data = {Username: userName, Updatetype: '$set',\n                Key2updt: 'Bio', Value2updt: bio\n    }\n\n    // object containing fetch options for the put request\n    let options = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n    }\n\n    let postUrl = 'http://192.168.1.93:4001/updatebio'\n    // post request using options object\n    console.time(\"put response took\");\n    let response = await fetch(postUrl, options)\n    let convert = await response.json ()\n    console.timeEnd(\"put response took\");\n    console.log(\"Put completed updated document is:\")\n    console.log(convert)\n\n    if ( response.status === 401 || response.status === 400){// handle not a match\n      alert(\"your bio didnt save try again\")\n      // Navigate(\"/signIn\")\n      //return false   \n     } else if ( response.status === 200){ // if password is a match return auth'd username\n      console.log(\"saved bio, redirecting to profile page\")\n      //alert(\"saved\")\n\t\t\t//document.cookie = \"authjwt=\"+convert.token; // store data in cookie\n\t\t\t//localStorage.setItem('jwt_token', convert.token) // Store JWT in storage\n      //alert(\"Welcome to the club! Please setup your profile\")\n\t\t\tNavigate (\"/profile/\"+sessionUser)\n     }\n  }\n\n  // async function getPics (picNum) {\n  //   let options = {\n  //     method: 'GET'\n  //   }\n\n  //   let picUrl = (\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic\" + picNum + \".png\")\n\n  //   let response = await fetch(picUrl, options)\n\n  //   if ( response.status === 401 || response.status === 400){// if user img does not exist \n  //      return \"./profbkup.jpg\" // return local uplod icon address\n  //    } else if ( response.status === 200){ // if there is img return its src\n  //     return picUrl\n  //    }\n  // }\n\n\n  function triggerClick(event){\n    // clicking image triggers upload button click\n    var myButton = document.getElementById(event.target.name);\n    if ( myButton ) {\n      myButton.click()\n    }\n  }\n\n  // standard post\n  async function handleSubmission (event) {\n    if (event) {\n      let file = (event.target.files[0])\n      let Picnum = event.target.id\n      var data = new FormData() \n      data.append('file', file) // add the file to the form\n      data.append('user', userName)\n    \n      let options = {\n        method: 'POST',\n        body: data, \n      }\n      //Create url to post file passing the username and pic number for storage\n      let signinurl = 'http://192.168.1.93:4001/postfile/' + userName + \"/\" + Picnum\n\n      // post the json\n      let response = await fetch(signinurl, options)\n      let convert = await response.json ()\n      console.log(convert.Imgaddy)\n      let newimageurl = convert.Imgaddy // get posted img address and change profile picture\n      let pic2Replace = Picnum + \"1\"\n      document.getElementById(pic2Replace).src = newimageurl;\n    }\n  };\n\n  return (\n            <>\n              <span className=\"login100-form-title p-b-53\">\n                Create your profile\n              </span>\n                {/*  <!--profpic1--> */}\n                <div className=\"row\" align=\"center\">\n                    <div className=\"col-md-4 mb-3\" >\n                      <div className=\"profpics\">\n                        <img className=\"profpics\" id= \"profpic11\" name=\"profpic1\"  onClick={triggerClick} alt=\"alt\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic1.png\"}\n                          data-holder-Rendered=\"true\"/>\n                      </div>\n                      \n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic1\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader1\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic2--> */}\n                      <div className=\"col-md-4 mb-3\" >\n                      <div className=\"profpics\">\n                        <img className=\"profpics\"  id= \"profpic21\" name=\"profpic2\" onClick={triggerClick} alt=\"100x100\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic2.png\"}\n                          data-holder-Rendered=\"true\"/>\n                                </div>\n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic2\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader2\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic3--> */}\n                      <div className=\"col-md-4 mb-3\" >\n                    <img className=\"profpics\"  id= \"profpic31\" name=\"profpic3\" onClick={triggerClick} alt=\"100x100\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic3.png\"}\n                      data-holder-Rendered=\"true\"/>\n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic3\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader3\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic4--> */}\n                      <div className=\"col-md-4 mb-3\" >\n                    <img className=\"profpics\"  id= \"profpic41\" name=\"profpic4\" onClick={triggerClick} alt=\"100x100\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic4.png\"}\n                      data-holder-Rendered=\"true\"/>\n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic4\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader4\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic5--> */}\n                      <div className=\"col-md-4 mb-3\" >\n                    <img className=\"profpics\"  id= \"profpic51\" name=\"profpic5\" onClick={triggerClick} alt=\"100x100\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic5.png\"}\n                      data-holder-Rendered=\"true\"/>\n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic5\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader5\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic6--> */}\n                      <div className=\"col-md-4 mb-3\" >\n                    <img className=\"profpics\"  id= \"profpic61\" name=\"profpic6\" onClick={triggerClick} alt=\"100x100\" src={\"https://\" + userName + \"ajh46unique.s3.us-east-2.amazonaws.com/profpic6.png\"}\n                      data-holder-Rendered=\"true\"/>\n\n                  </div>\n                  <div className=\"visually-hidden\">\n                        {/* <!--the picture click triggers a click of find file button using its name prop to pass to func and use as id then same for onChange to upload button.. chain of name = next elements id--> */}\n                      \n                            <div>\n                                  <input id=\"profpic6\" type=\"file\" className=\"blocked\" onChange={handleSubmission}  name= \"uploader6\"/>\n                            </div>\n                            {/* <button type=\"button\" id=\"uploader1\" name=\"profpic1\" onClick=\"(uploadpic(this.name))\" className=\"blocked\">Upload</button> */}\n                      \n                    </div>\n                      {/* <!--profpic6--> */}\n                </div>                   \n              <div className=\"p-t-13 p-b-9\">\n              </div>\n                <span className=\"txt10\">\n                  About Me\n                </span> \n              <div className=\"wrap-input100 validate-input\">\n                ​\n                <span><textarea id=\"bioBox\" rows=\"50\" cols=\"70\"></textarea></span>\n              </div>\n\n              <div className=\"container-login100-form-btn m-t-17\">\n                <button className=\"login100-form-btn\" type=\"button\" onClick={() =>{updateBio()}}>\n                  Save Changes\n                </button>\n              </div>\n              <div className=\"w-full text-center p-t-55\">\n                {/* <span className=\"txt2\">\n                  Not a member?\n                </span> */}\n\n                {/* <a href=\"signup.html\" className=\"txt2 bo1\"> */}\n                <button onClick={() => {Logout()}} className=\"txt2 bo1\" >\n                  logout\n                </button>\n              </div>\n            </>\n          )\n}",{"ruleId":"118","severity":1,"message":"119","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"122","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":16},{"ruleId":"118","severity":1,"message":"123","line":21,"column":10,"nodeType":"120","messageId":"121","endLine":21,"endColumn":14},{"ruleId":"118","severity":1,"message":"124","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":18},{"ruleId":"118","severity":1,"message":"125","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"118","severity":1,"message":"126","line":6,"column":10,"nodeType":"120","messageId":"121","endLine":6,"endColumn":16},{"ruleId":"118","severity":1,"message":"127","line":6,"column":18,"nodeType":"120","messageId":"121","endLine":6,"endColumn":32},{"ruleId":"118","severity":1,"message":"128","line":4,"column":9,"nodeType":"120","messageId":"121","endLine":4,"endColumn":15},{"ruleId":"118","severity":1,"message":"129","line":4,"column":17,"nodeType":"120","messageId":"121","endLine":4,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"130","line":5,"column":20,"nodeType":"120","messageId":"121","endLine":5,"endColumn":29},{"ruleId":"118","severity":1,"message":"122","line":6,"column":10,"nodeType":"120","messageId":"121","endLine":6,"endColumn":16},{"ruleId":"118","severity":1,"message":"131","line":6,"column":24,"nodeType":"120","messageId":"121","endLine":6,"endColumn":35},{"ruleId":"118","severity":1,"message":"132","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":15},{"ruleId":"118","severity":1,"message":"133","line":17,"column":23,"nodeType":"120","messageId":"121","endLine":17,"endColumn":37},{"ruleId":"118","severity":1,"message":"131","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":21},{"ruleId":"118","severity":1,"message":"124","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":19,"column":6,"nodeType":"136","endLine":19,"endColumn":8,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":45,"column":7,"nodeType":"136","endLine":45,"endColumn":9,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":209,"column":25,"nodeType":"142","endLine":209,"endColumn":106},{"ruleId":"140","severity":1,"message":"141","line":210,"column":25,"nodeType":"142","endLine":210,"endColumn":101},{"ruleId":"140","severity":1,"message":"141","line":217,"column":47,"nodeType":"142","endLine":217,"endColumn":141},{"ruleId":"140","severity":1,"message":"141","line":218,"column":47,"nodeType":"142","endLine":218,"endColumn":130},{"ruleId":"140","severity":1,"message":"141","line":257,"column":31,"nodeType":"142","endLine":257,"endColumn":54},{"ruleId":"143","severity":1,"message":"144","line":257,"column":39,"nodeType":"145","messageId":"146","endLine":257,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":264,"column":61,"nodeType":"142","endLine":264,"endColumn":84},{"ruleId":"143","severity":1,"message":"144","line":264,"column":69,"nodeType":"145","messageId":"146","endLine":264,"endColumn":83},{"ruleId":"147","severity":1,"message":"148","line":291,"column":56,"nodeType":"142","endLine":291,"endColumn":146},{"ruleId":"118","severity":1,"message":"149","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":29},{"ruleId":"118","severity":1,"message":"150","line":4,"column":23,"nodeType":"120","messageId":"121","endLine":4,"endColumn":32},{"ruleId":"118","severity":1,"message":"123","line":13,"column":10,"nodeType":"120","messageId":"121","endLine":13,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":33,"column":5,"nodeType":"136","endLine":33,"endColumn":7,"suggestions":"151"},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Outlet' is defined but never used.","'auth' is assigned a value but never used.","'useState' is defined but never used.","'set' is defined but never used.","'render' is assigned a value but never used.","'setForceRender' is assigned a value but never used.","'Render' is assigned a value but never used.","'SetRender' is assigned a value but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'ChkAuth' is defined but never used.","'setSessionUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Navigate'. Either include it or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'getCmt'. Either include it or remove the dependency array.",["153"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'getMultipleAccounts' is defined but never used.","'useParams' is defined but never used.",["154"],{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"155","fix":"159"},"Update the dependencies array to be: [Navigate]",{"range":"160","text":"161"},"Update the dependencies array to be: [getCmt]",{"range":"162","text":"163"},{"range":"164","text":"161"},[509,511],"[Navigate]",[1112,1114],"[getCmt]",[911,913]]